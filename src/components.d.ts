/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BUTTON_TYPES, SIZES, VARIANTS } from "./utils/types";
export { BUTTON_TYPES, SIZES, VARIANTS } from "./utils/types";
export namespace Components {
    interface JhAlert {
        "dismissible"?: boolean;
        "variant"?: VARIANTS;
    }
    interface JhBadge {
        "pill"?: boolean;
        "position"?: string;
        "variant"?: VARIANTS;
    }
    interface JhButton {
        "btnClasses"?: string;
        "disabled": boolean;
        "href"?: string;
        "label"?: string;
        "outline"?: boolean;
        "size"?: SIZES;
        "tagElement": string;
        "type"?: BUTTON_TYPES;
        "variant"?: VARIANTS;
    }
    interface JhList {
        "classNames"?: string;
        "flush"?: boolean;
        "numbered"?: boolean;
    }
    interface JhListItem {
        "actionable"?: boolean;
        "active"?: boolean;
        "disabled"?: boolean;
        "variant"?: VARIANTS;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface JhAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJhAlertElement;
}
export interface JhButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJhButtonElement;
}
declare global {
    interface HTMLJhAlertElementEventMap {
        "close": any;
    }
    interface HTMLJhAlertElement extends Components.JhAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLJhAlertElementEventMap>(type: K, listener: (this: HTMLJhAlertElement, ev: JhAlertCustomEvent<HTMLJhAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLJhAlertElementEventMap>(type: K, listener: (this: HTMLJhAlertElement, ev: JhAlertCustomEvent<HTMLJhAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLJhAlertElement: {
        prototype: HTMLJhAlertElement;
        new (): HTMLJhAlertElement;
    };
    interface HTMLJhBadgeElement extends Components.JhBadge, HTMLStencilElement {
    }
    var HTMLJhBadgeElement: {
        prototype: HTMLJhBadgeElement;
        new (): HTMLJhBadgeElement;
    };
    interface HTMLJhButtonElementEventMap {
        "jhClick": any;
    }
    interface HTMLJhButtonElement extends Components.JhButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLJhButtonElementEventMap>(type: K, listener: (this: HTMLJhButtonElement, ev: JhButtonCustomEvent<HTMLJhButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLJhButtonElementEventMap>(type: K, listener: (this: HTMLJhButtonElement, ev: JhButtonCustomEvent<HTMLJhButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLJhButtonElement: {
        prototype: HTMLJhButtonElement;
        new (): HTMLJhButtonElement;
    };
    interface HTMLJhListElement extends Components.JhList, HTMLStencilElement {
    }
    var HTMLJhListElement: {
        prototype: HTMLJhListElement;
        new (): HTMLJhListElement;
    };
    interface HTMLJhListItemElement extends Components.JhListItem, HTMLStencilElement {
    }
    var HTMLJhListItemElement: {
        prototype: HTMLJhListItemElement;
        new (): HTMLJhListItemElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "jh-alert": HTMLJhAlertElement;
        "jh-badge": HTMLJhBadgeElement;
        "jh-button": HTMLJhButtonElement;
        "jh-list": HTMLJhListElement;
        "jh-list-item": HTMLJhListItemElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface JhAlert {
        "dismissible"?: boolean;
        "onClose"?: (event: JhAlertCustomEvent<any>) => void;
        "variant"?: VARIANTS;
    }
    interface JhBadge {
        "pill"?: boolean;
        "position"?: string;
        "variant"?: VARIANTS;
    }
    interface JhButton {
        "btnClasses"?: string;
        "disabled"?: boolean;
        "href"?: string;
        "label"?: string;
        "onJhClick"?: (event: JhButtonCustomEvent<any>) => void;
        "outline"?: boolean;
        "size"?: SIZES;
        "tagElement"?: string;
        "type"?: BUTTON_TYPES;
        "variant"?: VARIANTS;
    }
    interface JhList {
        "classNames"?: string;
        "flush"?: boolean;
        "numbered"?: boolean;
    }
    interface JhListItem {
        "actionable"?: boolean;
        "active"?: boolean;
        "disabled"?: boolean;
        "variant"?: VARIANTS;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "jh-alert": JhAlert;
        "jh-badge": JhBadge;
        "jh-button": JhButton;
        "jh-list": JhList;
        "jh-list-item": JhListItem;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jh-alert": LocalJSX.JhAlert & JSXBase.HTMLAttributes<HTMLJhAlertElement>;
            "jh-badge": LocalJSX.JhBadge & JSXBase.HTMLAttributes<HTMLJhBadgeElement>;
            "jh-button": LocalJSX.JhButton & JSXBase.HTMLAttributes<HTMLJhButtonElement>;
            "jh-list": LocalJSX.JhList & JSXBase.HTMLAttributes<HTMLJhListElement>;
            "jh-list-item": LocalJSX.JhListItem & JSXBase.HTMLAttributes<HTMLJhListItemElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
